# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
# C:\Users\hongt\OneDrive\HK7\PBL6\Virus-Scanner-With-Python\.venv\Scripts\activate.bat

from PyQt6 import QtCore, QtGui, QtWidgets
import sys
import sys
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QColor, QIcon
from PyQt6.QtWidgets import QApplication, QMessageBox, QFileDialog, QWidget, QGridLayout, QLineEdit, QPushButton, \
    QLabel, QTableWidget, QTableWidgetItem
from pathlib import Path
import pefile
import os
import array
import math
import pickle
import joblib
import sys
#....
import extract_infos_pe
import vt_check
#....
import sklearn.utils._cython_blas
import sklearn.tree
import sklearn.tree._utils
import sklearn.ensemble

current_directory = os.path.dirname(os.path.realpath(__file__))
# load features
features = pickle.loads(
    open(os.path.join(current_directory,"Model","features1.pkl"), 'rb').read())
# print(features)

# load model
clf = joblib.load(os.path.join(current_directory,"Model","random_forest_model.joblib"))

# API key
your_api_key = 'd026a25369946a04836369375d5f2deb680628a3d938f02ea5f7f1eca773058e'


# UI
class Ui_MalwareSanner(object):
    def setupUi(self, MalwareSanner):

        MalwareSanner.setObjectName("MalwareSanner")
        MalwareSanner.resize(811, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MalwareSanner)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 130, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.InputFolder = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.InputFolder.setGeometry(QtCore.QRect(110, 130, 461, 21))
        self.InputFolder.setObjectName("InputFolder")
        self.Browse = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Browse.setGeometry(QtCore.QRect(600, 130, 81, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Browse.setFont(font)
        self.Browse.setObjectName("Browse")
        self.Browse.clicked.connect(lambda: self.open_dir_dialog(MalwareSanner))
        self.tableWidget = QtWidgets.QTableWidget(parent=self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(40, 200, 641, 281))
        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setHorizontalHeaderLabels(('File', 'Detect', 'Check online'))
        self.tableWidget.setColumnWidth(0, 400)
        self.tableWidget.setColumnWidth(1, 100)
        self.tableWidget.setColumnWidth(2, 150)
        self.tableWidget.setObjectName("tableWidget")
        self.Delete = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Delete.setGeometry(QtCore.QRect(40, 500, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Delete.setFont(font)
        self.Delete.setObjectName("Delete")
        self.Delete.clicked.connect(lambda: self.Delete_file(MalwareSanner))
        self.Check = QtWidgets.QPushButton(parent=self.centralwidget)
        self.Check.setGeometry(QtCore.QRect(580, 500, 101, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Check.setFont(font)
        self.Check.setObjectName("Check")
        self.Check.clicked.connect(lambda: self.vt_check_bt(MalwareSanner))
        self.load = QtWidgets.QProgressBar(parent=self.centralwidget)
        self.load.setGeometry(QtCore.QRect(110, 160, 501, 23))
        self.load.setProperty("value", 24)
        self.load.setObjectName("load")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(130, 0, 431, 81))
        font = QtGui.QFont()
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        MalwareSanner.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MalwareSanner)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 811, 21))
        self.menubar.setObjectName("menubar")
        MalwareSanner.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MalwareSanner)
        self.statusbar.setObjectName("statusbar")
        MalwareSanner.setStatusBar(self.statusbar)

        self.retranslateUi(MalwareSanner)
        QtCore.QMetaObject.connectSlotsByName(MalwareSanner)

    # select a directory
    def open_dir_dialog(self, MalwareSanner):
        dir_name = QFileDialog.getExistingDirectory(MalwareSanner, "Select a Directory")

        if dir_name:
            path = Path(dir_name)
            self.Scanner(path)
            self.InputFolder.setText(str(path))
            self.load.setProperty("value", 0)
            row_index = 0
            # self.load.reset()
            file_paths = list(self.get_file_paths(path))
            total = len(file_paths)
            cn = 0
            # self.tableWidget.setRowCount(total)
            if total > 0:
                for file in file_paths:
                    try:
                        data = extract_infos_pe.extract_infos(file)
                        pe_features = list(map(lambda x: data[x], features))
                        # print(pe_features)
                        res = clf.predict([pe_features])[0]
                        # print(res)
                        self.tableWidget.insertRow(row_index)
                        self.tableWidget.setItem(row_index, 0, QTableWidgetItem(file))
                        self.tableWidget.setItem(row_index, 1, QTableWidgetItem(['legitimate', 'malicious'][int(res)]))
                        cn += 1
                        row_index += 1

                    except pefile.PEFormatError as e:
                        print(f"Error reading PE file {file}: {e}")
                        # Handle the specific error related to the PE file format
                        cn += 1
                    except Exception as e:
                        print(f"An error occurred while processing {file}: {e}")
                        # Handle other unexpected errors during processing
                        cn += 1
                    self.load.setProperty("value", int(cn * 100 / total))

        print("browse")
        return None

    # get all file of directory
    def get_file_paths(self, dir_path):
        for root, dirs, files in os.walk(dir_path):
            for file in files:
                yield os.path.join(root, file)

    def Scanner(self, path):
        print(path)

    # Delete action
    def Delete_file(self, MalwareSanner):
        print("Delete")
        current_row = self.tableWidget.currentRow()
        if current_row < 0:
            return QMessageBox.warning(MalwareSanner, 'Warning', 'Please select a file to delete!')
        file_path = self.tableWidget.item(current_row, 0).text()

        button = QMessageBox.question(
            MalwareSanner,
            'Confirmation',
            'Are you sure that you want to delete the selected row?',
            QMessageBox.StandardButton.Yes |
            QMessageBox.StandardButton.No
        )
        if button == QMessageBox.StandardButton.Yes:
            self.tableWidget.removeRow(current_row)
            return os.remove(file_path)

    # Check online
    def vt_check_bt(self, MalwareSanner):
        print("check")
        current_row = self.tableWidget.currentRow()
        if current_row < 0:
            return QMessageBox.warning(MalwareSanner, 'Warning', 'Please select a file to check!')
        file_path = self.tableWidget.item(current_row, 0).text()
        file_hash = vt_check.hash_md5(file_path)
        try:
            file_info = vt_check.get_file_info(file_hash, your_api_key)
            if file_info:
                # print(file_info)
                m = file_info["data"]["attributes"]["last_analysis_stats"]["malicious"]
                u = file_info["data"]["attributes"]["last_analysis_stats"]["undetected"]
                if m == 0:
                    self.tableWidget.item(current_row, 0).setBackground(QColor(0,255,0))
                else:
                    self.tableWidget.item(current_row, 0).setBackground(QColor(255, 0, 0))
                res = str(m) + '/' + str(m + u)
                print(res)
                self.tableWidget.setItem(current_row, 2,  QTableWidgetItem(res))
        except Exception as e:
            print(f"An error occurred while processing {file_path}: {e}")
            # Handle other unexpected errors during processing
            
        return None

    # Ui
    def retranslateUi(self, MalwareSanner):
        _translate = QtCore.QCoreApplication.translate
        MalwareSanner.setWindowTitle(_translate("MalwareSanner", "MainWindow"))
        self.label.setText(_translate("MalwareSanner", "Directory"))
        self.Browse.setText(_translate("MalwareSanner", "Browse"))
        self.Delete.setText(_translate("MalwareSanner", "Delete"))
        self.Check.setText(_translate("MalwareSanner", "Check Online"))
        self.label_2.setText(_translate("MalwareSanner", "PBL6: Malware scanner"))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    MalwareSanner = QtWidgets.QMainWindow()
    icon_file_path = os.path.join(current_directory,"Icon","antivirus.png")
    MalwareSanner.setWindowIcon(QIcon(icon_file_path))
    MalwareSanner.setWindowTitle('MalwareSanner')
    ui = Ui_MalwareSanner()
    ui.setupUi(MalwareSanner)
    MalwareSanner.show()
    sys.exit(app.exec())
